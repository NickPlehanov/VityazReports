// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Windows.Controls.Primitives;
using System.Windows.Media;
using Microsoft.EntityFrameworkCore;
using VityazReports.Data;

#nullable disable

namespace VityazReports.Models.GuardObjectsOnMapGBR
{
    public partial class ObjType
    {
        public ObjType(int objTypeId, int orderNumber, string objTypeName, string description, bool recordDeleted, bool isShowOnMap, string name, int? co_priv, int? co_com,Color color) {
            ObjTypeId = objTypeId;
            OrderNumber = orderNumber;
            ObjTypeName = objTypeName;
            Description = description;
            RecordDeleted = recordDeleted;
            IsShowOnMap = isShowOnMap;
            Name = name;
            CountObjectPrivate = co_priv;
            CountObjectCom = co_com;
            RouteColor = color;
        }

        public ObjType(int objTypeId, int orderNumber, string objTypeName, string description, bool recordDeleted) {
            ObjTypeId = objTypeId;
            OrderNumber = orderNumber;
            ObjTypeName = objTypeName;
            Description = description;
            RecordDeleted = recordDeleted;
        }

        [Key]
        [Column("ObjTypeID")]
        public int ObjTypeId { get; set; }
        public int OrderNumber { get; set; }
        [Required]
        [StringLength(128)]
        public string ObjTypeName { get; set; }
        [StringLength(255)]
        public string Description { get; set; }
        public bool RecordDeleted { get; set; }
        [NotMapped]
        public bool IsShowOnMap { get; set; }
        [NotMapped]
        private string _Name { get; set; }
        [NotMapped]
        public string Name { 
            get {
                if (string.IsNullOrEmpty(_Name) && !CountObjectPrivate.HasValue && !CountObjectCom.HasValue)
                    return "";
                if (!string.IsNullOrEmpty(_Name) && !CountObjectPrivate.HasValue && !CountObjectCom.HasValue)
                    return _Name;
                if (string.IsNullOrEmpty(_Name) && CountObjectPrivate.HasValue && !CountObjectCom.HasValue)
                    return "";
                //return _Name+" ("+ (CountObjectPrivate.Value+CountObjectCom.Value).ToString()+":"+ CountObjectCom.Value.ToString() + "/"+ CountObjectPrivate.Value.ToString() + ")";
                return string.Format("{0} ({1}  {2}/{3})",_Name, CountObjectPrivate.Value + CountObjectCom.Value, CountObjectCom.Value, CountObjectPrivate.Value);
            }
            set {
                _Name = value;
            }
        }
        [NotMapped]
        public int? CountObjectPrivate { get; set; }
        [NotMapped]
        public int? CountObjectCom { get; set; }
        //[NotMapped]
        //public int? CountObjects { get; set; }

        [NotMapped]
        public ToggleButton TgBtn { get; set; } = null;
        [NotMapped]
        public Color? RouteColor { get; set; }
    }
}